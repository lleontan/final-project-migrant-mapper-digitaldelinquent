scatterplot <- plot_ly(df, type = 'scatter', x = ~v1, y = ~v2)
scatterplot
scatterplot
styled.scatterplot <- scatterplot(marker = list(color = '#123456', size = 10))
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
marker = list(color = '#123456', size = 10))
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
styled.scatterplot
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#123456', size = 10))
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
styled.scatterplot
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
marker = list(color = '#222222', size = 10))
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#222222', size = 10))
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
styled.scatterplot
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#222222',
size = 10,
line = list(color = '#99999',
width = 2))
)
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
styled.scatterplot
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#222222',
size = 10,
line = list(color = '#99999',
width = 2))
) %>%
layout(title = 'Number from two vectors',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
styled.scatterplot
data("diamonds")
sample <-sample(diamonds, size = 1000)
View(diamonds)
d <- diamonds[sample(nrow(diamonds), size = 1000)]
d <- diamonds[sample(nrow(diamonds), size = 1000), ]
View(d)
View(d)
new.plot <- plot_ly(d, x = ~carat, y = ~price, z = ~depth)
new.plot
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#222222',
size = 10,
line = list(color = '#99999',
width = 2))
) %>%
layout(title = 'Number from two vectors',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
styled.scatterplot
# load in the data set diamonds
data("diamonds")
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
d <- diamonds[sample(nrow(diamonds), size = 1000), ]
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
new.plot <- plot_ly(d, x = ~carat, y = ~price, z = ~depth) %>%
add_markers(text = ~paste("Clarity: ", clarity))
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
new.plot
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
shiny::runApp('Documents/info201/a8-building-apps-gnixuix')
shiny::runApp('Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent')
shiny::runApp('Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent')
getwd()
shiny::runApp('Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent')
birthplaces<-read.csv("./data/USA_by_birthplace.csv")
getwd()
setwd(/Users/jefflao/Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent)
> setwd("/Users/jefflao/Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent")
setwd("/Users/jefflao/Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent")
runApp()
birthplaces<-read.csv("./data/USA_by_birthplace.csv")
<<<<<<< f8877627ff104e707d602056b10d2bfc28d2c3c8
#returns vector of year indexes
runApp()
countries <<- getCountrySum()
runApp()
runApp()
runApp()
runApp()
birthplaces<-read.csv("./data/USA_by_birthplace.csv")
runApp()
>>>>>>> e0e853ab8062aa1d450b80a8b4df24c126821b06
runApp()
shiny::runApp()
runApp()
SearchByCountry <- function(d,country){
yearIndexes<-grep("X", colnames(d))
yearNames<-as.numeric(gsub("X",x=colnames(birthplaces[yearIndexes]), replacement=""))
d <- d %>%
filter(OdName == country)
x <- d[yearIndexes]
population <- as.numeric(paste(x))
yearNames <- as.numeric(yearNames)
m <- data.frame(yearNames,population)
m <- na.exclude(m)
p <- plot_ly(m,
x = ~yearNames,
y = ~population,
text = country,
type = "scatter",
mode = "markers",
color = ~population,
colors = "Accent",
size = ~population,
sizes = c(3,35),
marker = list(
colorbar = list(
title = "population",
titlefont = list(size = 10),
thickness = 12,
tickfont = list(size = 10)
),
sizemode = "diameter",
opacity = 0.7
)) %>%
layout(title = paste0("Imigrants change of ", country),
xaxis = list(showgrid = FALSE,
ticklen = 3,
title = "year"),
yaxis = list(showgrid = FALSE,
ticklen = 3)
)
return(p)
}
SearchByCountry(birthplaces,"China")
runApp()
runApp()
SearchByCountry(birthplaces,"Afghanistan")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
=======
>>>>>>> Local changes
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hoverinfo = "text",
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p <- plot_ly(m,
x = ~yearNames,
y = ~population,
text = ~paste("Immigrant amount:",population, '<br> Year:', yearNames),
type = "scatter",
mode = "markers + line",
color = ~population,
colors = "Accent",
size = ~population,
sizes = c(3,35),
hoverinfo = "text",
line = list(simplify = FALSE,
color = "Yellows",
shape = "spline"),
marker = list(
colorbar = list(
title = "population",
titlefont = list(size = 10),
thickness = 12,
tickfont = list(size = 10)
),
sizemode = "diameter",
line = list(cauto = TRUE),
opacity = 0.7
)) %>%
layout(title = paste0("Number of imigrants of ", country, " in each year"),
xaxis = list(showgrid = FALSE,
ticklen = 3,
title = "year"),
yaxis = list(showgrid = FALSE,
ticklen = 3,
title = "amount")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
