# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
plot_ly(midwest, x=~percollege, type='box', color=~state)
# Install Plotly
library(plotly)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest, x=~percollege, type='box', color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
# Call your variable and enjoy your awesome plot!
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
df <- data.frame(v1, v2)
scatterplot <- plot_ly(df, type = 'scatter')
plot_ly(df, type = 'scatter')
View(df)
scatterplot <- plot_ly(df, type = 'scatter', x = ~v1, y = ~v2)
plot_ly(df, type = 'scatter')
scatterplot <- plot_ly(df, type = 'scatter', x = ~v1, y = ~v2)
scatterplot
scatterplot
styled.scatterplot <- scatterplot(marker = list(color = '#123456', size = 10))
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
marker = list(color = '#123456', size = 10))
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
styled.scatterplot
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#123456', size = 10))
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
styled.scatterplot
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
marker = list(color = '#222222', size = 10))
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#222222', size = 10))
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
styled.scatterplot
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#222222',
size = 10,
line = list(color = '#99999',
width = 2))
)
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
styled.scatterplot
# load in the data set diamonds
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#222222',
size = 10,
line = list(color = '#99999',
width = 2))
) %>%
layout(title = 'Number from two vectors',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
styled.scatterplot
data("diamonds")
sample <-sample(diamonds, size = 1000)
View(diamonds)
d <- diamonds[sample(nrow(diamonds), size = 1000)]
d <- diamonds[sample(nrow(diamonds), size = 1000), ]
View(d)
View(d)
new.plot <- plot_ly(d, x = ~carat, y = ~price, z = ~depth)
new.plot
# Install Plotly
library(plotly)
library(dplyr)
# Use the plot_ly function to test it out and see that it is working
# create a variable and pass in the plot_ly function that takes in
# the data midwest, sets the x to ~percollege, the color to ~state
# and the type to "box"
graphic <- plot_ly(midwest,
x=~percollege,
type='box',
color=~state)
# Make two vectors of numbers between 1 and 10, with each vector having 10 numbers in it
v1 <- c(1:10)
v2 <- c(11:20)
# create a data frame of the two vectors
df <- data.frame(v1, v2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
scatterplot <- plot_ly(df,
type = 'scatter',
x = ~v1,
y = ~v2)
# Call your variable and enjoy your awesome plot!
scatterplot
# Now create a new variable styled.scatterplot. Using the same data and scatterplot
# as from earlier, but you are going to change the markers.  Make it so the
# markers are size 10, of a color of your choice.  Finally change the boarder,
# of the markers to a differnet color with a widthe of 2
styled.scatterplot <- plot_ly(df,
x = ~v1,
y = ~v2,
marker = list(color = '#222222',
size = 10,
line = list(color = '#99999',
width = 2))
) %>%
layout(title = 'Number from two vectors',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
# Call the style.scatterplot variable and see what has changed. Finally add
# add a pipe operator and use the layout function to add a title and set the
# x and y axis to have zeroline = FALSE
styled.scatterplot
# load in the data set diamonds
data("diamonds")
# Use sample() and nrow() to only take a random sampling of 1000 rows from the
# diamonds data and pass that into a new variable
d <- diamonds[sample(nrow(diamonds), size = 1000), ]
# Now create a new plot passing in your sample of a 1000 rows from the diamonds
new.plot <- plot_ly(d, x = ~carat, y = ~price, z = ~depth) %>%
add_markers(text = ~paste("Clarity: ", clarity))
# data, set x, y, and z axis as carat, price, and depth.
# Finally add makers that is the titled "Clarity, and adds the Clarity of the
# diamonds
new.plot
#Bonus
# For this you will make a graph with two differnet Y axis
# crete a variable that will have the information for the second Y axis
# for this the font should be red, overlaying = "y", on the right side,
# and should have a title distinguishing it as the second y axis.
# Now call the plot_ly() funcion and use pipe operators to have two add_line
# functions. The first will have x values from 1:3 and y value of 10*(1:3)
# The second will have x values from 2:4 and y values from 1:3.  Both shoud
# be named something different.  Finally have a pipe operator connecting the
# layout() function and add a title for the graph, set the yaxis2 to the previous
# variable and have a title for the xaxis
shiny::runApp('Documents/info201/a8-building-apps-gnixuix')
shiny::runApp('Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent')
shiny::runApp('Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent')
getwd()
shiny::runApp('Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent')
runApp('Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent')
getwd()
setwd("/Users/jefflao/Documents/info201/Final-Project/final-project-migrant-mapper-digitaldelinquent")
runApp()
birthplaces<-data
runApp()
runApp()
countries <<- getCountrySum()
runApp()
library(dplyr)
#duplicate code for testing, put it in another file somewhere or whatever.
setYearData<-function(){
yearIndexes<<-grep("X", colnames(regions))
yearTable<<-regions[c(1,3,yearIndexes)]
yearNames<<-as.numeric(gsub("X",x=colnames(regions[yearIndexes]), replacement=""))
}
grepYearIndexes<-function(data.set){
#returns vector of year indexes
return(grep("X", colnames(data.set)))
}
getCountrySum<-function(){
#Returns The total immigration of each country.
new.data<-data.frame(birthplaces[,c(1,3,5,9,grepYearIndexes(birthplaces))],stringsAsFactors=FALSE)
new.data$mag<- rowSums(new.data[grep("X", colnames(new.data))], na.rm=TRUE)
new.data<-new.data %>% arrange(-mag)
return(new.data)
}
largestContributorsGraph<-function(countries.count){
countries.count=countries.count+1
show.percent="percent"
if(countries.count>22){
show.percent = "none"
}
countries <<- getCountrySum()
worldData<- countries %>% filter(OdName=="Total")
top.countries<-countries[1:countries.count,] %>% filter(OdName!="Total")
top.countries.indexes<-c(grep("X", colnames(top.countries)),length(top.countries))
worldData[top.countries.indexes]<-
worldData[top.countries.indexes]-
colSums(top.countries[top.countries.indexes],na.rm = TRUE)
worldData$OdName<-"All Other"
top.countries<-rbind(worldData,top.countries)
p<-plot_ly(top.countries,
labels=~OdName,
values=~mag,
type="pie",
showlegend = FALSE,
textinfo=show.percent
) %>%
layout(title = paste0('Immigrants since 1980:',  filter(countries,OdName=="Total")$mag),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
return(p)
}
getCountrySumGraph<-function(regions){
full.regions<<-regions %>% filter(grepl("Total",AreaName))
region.year.indexes<-grep("X", colnames(regions))
region.year.table<-regions[c(1,3,4,region.year.indexes)] %>%
filter(!grepl("Total",AreaName)) %>%
arrange(X2012)
region.year.table <- region.year.table[,colSums(is.na(region.year.table))<nrow(region.year.table)]
region.year.names<-as.numeric(gsub("X",x=colnames(region.year.table[3:length(region.year.table)]), replacement=""))
country.names<-as.vector(region.year.table$RegName)
by.years<-as.data.frame(t(region.year.table[4:length(region.year.table)]))
by.years<-cbind(year=rownames(by.years),by.years)
by.years$year<-gsub(pattern="X",x=by.years$year,replacement="")
by.years$sum<-rowSums(by.years[,3:length(by.years)],na.rm = TRUE)
colnames(by.years)<-c("year",country.names,"sum")
mexico.col<-birthplaces %>% filter(OdName=="Mexico")
mexico.col<-mexico.col %>%  select(grepYearIndexes(mexico.col)) %>% as.vector()
by.years<- by.years %>% mutate(mexico=as.numeric(mexico.col[1,1:nrow(by.years)]))#%>% filter(year==selectedYear)
#rownames(by.years)<-yearTable$OdName
p<-plot_ly(
by.years,
x = ~ year,
y = ~ by.years[1],
type = 'bar',
showlegend = FALSE
) %>%
add_trace(
x=~year,
y=~sum,
type = 'scatter',
mode = 'lines',
name = 'All',
line = list(color = '#45171D')
) %>% add_trace(
x=~year,
y=~mexico,
type = 'scatter',
mode = 'lines',
name = 'Mexico',
line = list(color = '#3a00e9'
,width=3
)
) %>%
layout(title = paste0("US Immigration Since 1980"),barmode="stack",
hovermode="closest",
xaxis=list(
title = '',
tickangle = 55,
ticks = "outside",
ticklen = 2
),
yaxis=list(
title = "Immigrants"
))
colRange<-2:(ncol(by.years)-2)
for(i in colRange){
p<- p %>% add_trace(y =  by.years[,i], name = colnames(by.years)[i],showlegend = FALSE)
}
return(p)
}
getCountryInformation <- function(country) {
if (is.element(country, countries$OdName)) {
target.country <- filter(countries, OdName == country)
info <- paste0("There were ", target.country$mag," immigrants from ", country," between the years of 1980-2013. The nation of ", country," is a ", target.country$DevName," country
in ", target.country$AreaName, ".")
return(info)
} else {
return("Not a valid country name! Try again!")
}
}
runApp()
countries <- getCountrySum()
countries <- getCountrySum()
birthplaces<-data
birthplaces <- data
birthplaces<-read.csv("./data/USA_by_birthplace.csv")
#returns vector of year indexes
runApp()
countries <<- getCountrySum()
runApp()
runApp()
runApp()
runApp()
birthplaces<-read.csv("./data/USA_by_birthplace.csv")
runApp()
runApp()
